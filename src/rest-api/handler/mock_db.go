// Code generated by MockGen. DO NOT EDIT.
// Source: src/rest-api/handler/db.go
//
// Generated by this command:
//
//	mockgen -source src/rest-api/handler/db.go -package handler -destination=src/rest-api/handler/mock_db.go
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	lib "github.com/Baitinq/fs-tracer-backend/lib"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetLatestFileByPath mocks base method.
func (m *MockDB) GetLatestFileByPath(ctx context.Context, path, user_id string) (*lib.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFileByPath", ctx, path, user_id)
	ret0, _ := ret[0].(*lib.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFileByPath indicates an expected call of GetLatestFileByPath.
func (mr *MockDBMockRecorder) GetLatestFileByPath(ctx, path, user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFileByPath", reflect.TypeOf((*MockDB)(nil).GetLatestFileByPath), ctx, path, user_id)
}

// GetUserIDByAPIKey mocks base method.
func (m *MockDB) GetUserIDByAPIKey(ctx context.Context, apiKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByAPIKey indicates an expected call of GetUserIDByAPIKey.
func (mr *MockDBMockRecorder) GetUserIDByAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByAPIKey", reflect.TypeOf((*MockDB)(nil).GetUserIDByAPIKey), ctx, apiKey)
}
