// Code generated by MockGen. DO NOT EDIT.
// Source: src/payload-processor/processor/db.go
//
// Generated by this command:
//
//	mockgen -source src/payload-processor/processor/db.go -package processor -destination=src/payload-processor/processor/mock_db.go
//

// Package processor is a generated GoMock package.
package processor

import (
	context "context"
	reflect "reflect"

	lib "github.com/Baitinq/fs-tracer-backend/lib"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// InsertFiles mocks base method.
func (m *MockDB) InsertFiles(ctx context.Context, files []lib.File, user_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFiles", ctx, files, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFiles indicates an expected call of InsertFiles.
func (mr *MockDBMockRecorder) InsertFiles(ctx, files, user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFiles", reflect.TypeOf((*MockDB)(nil).InsertFiles), ctx, files, user_id)
}
